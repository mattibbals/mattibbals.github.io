{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickedCarouselLeft","carouselPage","document","getElementsByClassName","style","animation","left","sliderPositions","clickedCarouselRight","maxcarouselPage","displayCarousel","photos","length","react_default","a","createElement","className","onClick","map","photo","idx","key","src","urlMedium","alt","id","showListingDetail","listing","setState","listingDetail","hideListingDetail","toggleListView","isListView","state","formatNumber","inPrice","String","replace","$0","$1","$2","formatPhysical","inPhysical","physicalDisplay","bedRooms","bathRooms","squareFeet","yearBuilt","formatAddress","inAddress","address1","address2","city","zip","listings","fetch","mode","then","response","json","properties","filter","visibility","catch","console","error","bind","assertThisInitialized","i","push","_this2","buttonText","displayListings","mainImageUrl","financial","listPrice","toFixed","physical","lease","leaseSummary","monthlyRent","address","displayListingDetail","resources","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4440cb76.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listings : null,\n      isListView : false,\n      listingDetail : null\n    }\n    fetch('//dev1-sample.azurewebsites.net/properties.json', {mode: \"cors\"}) \n    .then(response => response.json())\n    .then(response => {\n      this.setState({listings: response.properties.filter(function(listing) {return listing.visibility === 'Public'})});\n    })\n    .catch(function() {\n        console.error('failure fetching listings data');\n    });\n    this.toggleListView = this.toggleListView.bind(this);\n    this.showListingDetail = this.showListingDetail.bind(this);\n    this.hideListingDetail = this.hideListingDetail.bind(this);\n    this.clickedCarouselLeft = this.clickedCarouselLeft.bind(this);\n    this.clickedCarouselRight = this.clickedCarouselRight.bind(this);\n    this.carouselPage = 0;\n    this.maxcarouselPage = 0;\n    this.sliderPositions = [];\n    for (var i=0; i<10; i++) {\n      this.sliderPositions.push('-' + (i * 680) + 'px');\n    }\n  }\n  clickedCarouselLeft = function() {\n    if (this.carouselPage > 0) {\n      document.getElementsByClassName('carouselSlider')[0].style.animation = 'p' + this.carouselPage + 'to' + --this.carouselPage + ' 1s 1';\n      document.getElementsByClassName('carouselSlider')[0].style.left = this.sliderPositions[this.carouselPage];\n    }\n  }\n  clickedCarouselRight = function() {\n    if (this.carouselPage < (this.maxcarouselPage-1)) {\n      document.getElementsByClassName('carouselSlider')[0].style.animation = 'p' + this.carouselPage + 'to' + ++this.carouselPage + ' 1s 1';\n      document.getElementsByClassName('carouselSlider')[0].style.left = this.sliderPositions[this.carouselPage];\n    }\n  }\n  displayCarousel = function(photos) {\n    if (photos.length === 0) {\n      return <div>No Photos Available for this property</div>\n    }\n    this.carouselPage = 0;\n    this.maxcarouselPage = photos.length;\n    return (\n      <div className=\"carousel\">\n        <div className=\"carouselButtons\">\n          <button className=\"carouselLeft\" onClick={this.clickedCarouselLeft}>Prev Photo</button>\n          <button className=\"carouselRight\" onClick={this.clickedCarouselRight}>Next Photo</button>\n        </div>\n        <div className=\"carouselWindow\">\n          <table className=\"carouselSlider\"><tbody><tr>\n            {photos.map((photo, idx) => (\n              <td key={'photo_'+idx}><img src={photo.urlMedium} alt={photo.id} /></td>\n            ))}\n          </tr></tbody></table>\n        </div>\n      </div>\n    )\n  }\n  showListingDetail = function(listing) {\n    this.setState({listingDetail : listing});\n  }\n  hideListingDetail = function() {\n    this.setState({listingDetail : null});\n  }\n  toggleListView = function() {\n    this.setState({isListView : !this.state.isListView});\n  }\n  formatNumber = function(inPrice) {\n    return String(inPrice).replace(/(^|[^\\w.])(\\d{4,})/g, function($0, $1, $2) {\n      return $1 + $2.replace(/\\d(?=(?:\\d\\d\\d)+(?!\\d))/g, \"$&,\");\n    });\n  }\n  formatPhysical = function(inPhysical) {\n    let physicalDisplay = '';\n    physicalDisplay += inPhysical.bedRooms ? inPhysical.bedRooms + 'bd, ' : '?bd, ';\n    physicalDisplay += inPhysical.bathRooms ? inPhysical.bathRooms + 'ba | ' : '?ba | ';\n    physicalDisplay += inPhysical.squareFeet ? this.formatNumber(inPhysical.squareFeet) + 'sqft | ' : '?sqft | ';\n    physicalDisplay += ' Built in ' + (inPhysical.yearBuilt ? inPhysical.yearBuilt : '?');\n    return physicalDisplay;\n  }\n  formatAddress = function(inAddress) {\n    return (\n    <div className=\"address\">\n      {inAddress.address1 ? <div>{inAddress.address1}</div> : null}\n      {inAddress.address2 ? <div>{inAddress.address2}</div> : null}\n      <div className=\"city_state_zip\">\n        {inAddress.city ? <span>{inAddress.city + ', '}</span> : null}\n        {inAddress.state ? <span>{inAddress.state} </span> : null}\n        {inAddress.zip ? <span>{inAddress.zip}</span> : null}\n      </div>\n    </div>)\n  }\n  render() {\n    const buttonText = this.state.isListView ? 'List View' : 'Grid View';\n    const displayListings = this.state.listings === null ? <img src=\"spinner.gif\" alt=\"loading\"/> : this.state.listings.map((listing, idx) => (\n      <div onClick={() => this.showListingDetail(listing)} className=\"property_listing\" key={'property_listing_' + idx}>\n        <div className=\"img_container\">\n          <img className=\"mainImage\" src={listing.mainImageUrl} alt={listing.id} />\n        </div>\n        <div className=\"price\">{listing.financial ? ('$'+this.formatNumber(listing.financial.listPrice.toFixed(2))) : 'Price Not Available'}</div>\n        <div className=\"physical\">{listing.physical ? (this.formatPhysical(listing.physical)) : 'Physical data not available'}</div>\n        <div className=\"rent\">\n          {listing.lease && listing.lease.leaseSummary ? ( 'Current Rent : $' + this.formatNumber(listing.lease.leaseSummary.monthlyRent.toFixed(2)) ) : 'Lease data not available'}\n        </div>\n        {listing.address ? this.formatAddress(listing.address) : 'Unknown Address'}\n        <div className=\"grossYield\">{(listing.financial && listing.lease && listing.lease.leaseSummary) ? 'Gross Yield : ' + (((listing.lease.leaseSummary.monthlyRent.toFixed(2) * 12)/listing.financial.listPrice.toFixed(2))*100).toFixed(2) + '%'  : 'Gross Yield Not Available'}</div>   {/* (monthly rent * 12 / list price) */}\n      </div>\n    ));\n    const displayListingDetail = this.state.listingDetail ? \n      <div>\n        {this.state.listingDetail.address ? this.formatAddress(this.state.listingDetail.address) : <div>Unknown Address</div>}\n        {this.state.listingDetail.resources && this.state.listingDetail.resources.photos ? this.displayCarousel(this.state.listingDetail.resources.photos) : <div>No Photos Available</div>}\n      </div> : null;\n    return (\n      <div className=\"App\">\n        { this.state.listingDetail ? <button onClick={this.hideListingDetail}>{'Back to ' + buttonText}</button> : <button onClick={this.toggleListView}>{buttonText}</button> }\n        <div className={this.state.isListView ? 'list_view' : 'grid_view'}>\n          { this.state.listingDetail ? displayListingDetail : displayListings }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}